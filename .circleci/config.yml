version: 2.0

build_steps: &build_steps
  steps:
    - checkout
    - run: 
        name: Submodule Checkout
        command: git submodule sync && git submodule update --init
    - run:
        name: CMake
        command: cmake . -DCMAKE_BUILD_TYPE=Release -G Ninja
    - run:
        name: Build
        command: ninja -j4
    - run:
        name: Unit Test
        command: |
            for ut in bin/ut.*
            do
                LLVM_PROFILE_FILE=$ut.profraw python3 dependencies/mettle/scripts/mettle_junit.py $ut --output artifacts/test_results
            done
    - run:
        name: Generate Test Report
        command: /allure-2.6.0/bin/allure generate artifacts/test_results -o artifacts/test_reports
    - store_artifacts:
        path: artifacts
    - store_test_results:
        path: artifacts
    - run:
        name: Test Coverage
        command: |
           if ls bin/ut.*.profraw 1> /dev/null 2>&1; then
                llvm-profdata merge -sparse bin/ut.*.profraw -o stan.profdata;
                llvm-cov show -instr-profile=stan.profdata src/libstan.so -object bin/ut.value -object bin/ut.pitch -object bin/ut.chord -object bin/ut.beam -object bin/ut.tuplet -object bin/ut.key -object bin/ut.column -object bin/ut.lilypond_reader -object bin/ut.lilypond_writer src/ include/ > coverage.stan.txt;
                bash <(curl -s https://codecov.io/bash) -t be1c64b9-e403-48b6-82ff-c2541e90e7c8;
           fi

jobs:

  build_gcc:
    environment:
      CXX: g++
      CC: gcc
    docker:
      - image: cadenzio/cpp-build:0.0.3
    <<: *build_steps

  build_clang:
    environment:
      CXX: clang++-6.0
      CC: clang-6.0
      LLVM_PROFILE_FILE: stan.profraw
    docker:
      - image: cadenzio/cpp-build:0.0.3
    <<: *build_steps

workflows:
  version: 2
  build_and_test:
    jobs:
      - build_gcc
      - build_clang
